Requirements and Analysis Document for ICE

  Version: 

  Date: 2016-03-22

  Author: Niclas Krause

This version overrides all previous versions.

1 Introduction

1.1 Purpose of application 

The project aims to create a mobile application that solves the issue of finding lab partners for university projects.

1.2 General characteristics of application 

The project will be a mobile application developed for the android platform.
It will require both a server and a client side, client side being the android application.
The application will present all other unmatched users in the course,
the user will be able to choose wether or not they might consider working together with that person.
If two people match, they will be able to send a partner request and messages.
If partner request is approved they will be considered lab partners of the course and removed from the pool 
of unmatched users.
 

1.3 Scope of application 

  1. The application will only be avalible english

1.4 Objectives and success criteria of the project 

  1. It should be possible create and join to courses. 
  2. A user should be able to view all other unmatched users in the same course.
  3. Matched users should be able to chat and send partner requests to each other.

1.5 Definitions, acronyms and abbreviations 

Match - Two users who has agreed to consider each other as partners in the course.
Match request - One users has considerned another as potenital partner
Partner request - A request which if accepted will result in the sender of the request to be paired with the recipent.
Course - A collection of unmatched users, the course is idendifited by a unique code. Users can join the course using the code.
join - To enter the collection of unmatched users for a spesific course, to join you will need the unique code for that course.
Swipe - To approve or disapprove the potenital match with another user

2 Requirements

  1. A admin can create courses and recive the unique code for the new course
  2. A user can join for a course with a unique code
  3. A user can swipe other users
  4. Matched users can send partner request to each other
  5. Users that have recived a parter request can aprrove or deny it
  6. A admin can see which users have matched for all the courses they are administrating
  7. A admin can see all users for all the courses they are administrating

2.1 Functional requirements

Create a list of high level functions here (from the use cases).

2.2 Non-functional requirements 

Possible NA (not applicable).

2.2.1 Usability 

  Usability is high priority. The app should load very quickly and operate smoothly.
  The app communicates with a server that stores information about courses and groups.
    When a user requets to join a course this request is sent, along with his ID, to the
    server who then adds him to the course.
  The communication between client and server should be very short and descriptive. No
  complicated protocols.
  A person should be able to download the app and intuitively know how it works, no
  extensive tutorial should be required. The GUI should make it very clear how it works.

2.2.2 Reliability 
	NA
2.2.3 Performance 
	NA
2.2.4 Supportability

  The application will be developed for the android platform alone, no IOS version.
  If we however consider the posibility of two users using different systems, the type
  of system should not affect anything when displaying users, matching etc
  All communication with the server should be tested through unit tests, and the GUI
  should be tested manually. A description of how the GUI was tested and how it went should
  be included in the final documentation.

2.2.5 Implementation 

  The app will run on the android system for mobile phones, and the server will run
  on a remote host running JRE. The server is a command line application with a
  small set of administrative commands (to help debugging).

2.2.6 Packaging and installation

  The server will be delivered as a jar file and the application will be available
  as an APK file.

2.2.7 Legal 

  GPL 2.0

2.3 Application models

2.3.1 Use case model 

Use Case Create:
  Summary: This is how a course is created and the unique code is generated. This can only be done by an admin
  Users that know the the unique code can join (see use case join).
  Extends - 
  Includes -
  Participators: Admin users
  Priority: High
  
  Actor | System
  --------------
 1 Admin enters course details and clicks create button | 
  --------------
 2      | The course is created and the admin recives the unique code for the new course
  --------------
 3      | Users that know the code can now join(see use case join)

Use case join:
  Summary: The users has recived the code for a course and enters it into the app.
  The user can now start swipe and potentily match with other users in that course.
  Extends - 
  Includes -
  Participators: Users
  Priority: High
  Actor | System
  --------------
 1 User enters course code and clicks join button | 
  --------------
 2.0      | The user is entered into the course and notified of this
  --------------
 
 Alternate flow
 2.1    | The course code is invalid, user is notified of this and is not joined to a new course
 2.2    | The user is all ready joined for the course, user is nofified of this and remains joined

Use case Swipe :
  Summary: The user will be presented with other users from the same course, they can they swipe then to 
  indicate if they could or could not consider working together.
  Extends - 
  Includes -
  Participators: Users
  Priority: mid
  Actor | System
  --------------
 1 The users swipes ok for another user | 
  --------------
 2.0      | System makes a note that the that user have swiped ok and presents the user with another unmached user
  --------------
 
 Alternate flow
 2.1    | The pool of unmached users have been exhausted and the user is not presented with another unmached user

Use case View Joined :
  Summary: The admin can view all the users in the courses they are administrating and view which people have been paired
  Extends - 
  Includes -
  Participators: Admin
  Priority: low
  Actor | System
  --------------
 1 Admin selects a course from the admin page
  --------------
 2.0      | A list of all users that have join that course is displayed allong side with whom they are been paired with
  --------------
 
 Alternate flow
 1.1    | A admin have not created a course and is not able to select one

Use case Partner request :
Summary: A user that has matched with someone can send a Partner request to that  users, if accepted they will be considered labpartners
  Extends - 
  Includes -
  Participators: Users
  Priority: Mid
  Actor | System
  --------------
 1 User 'A' sends a parnter request to user 'B' and waits for a respons
  --------------
 2      | Notifys user 'B' (the recpient) that she has recvied a parnter request
  --------------
 3.0 User 'B' accepts the partner request | 
  --------------
 4.0    | Notifys user 'A' that the request have been approved

 Alternate flow
3.1 User 'B' declines the request 
  --------------
3.1.1    | User 'A' is notifyed that the request did not get approved
 

UML and a list of UC names (text for all in appendix)

2.3.2 Use cases priority

 1 - Create
 2 - Join
 3 - Swipe
 4 - Partner request
 5 - View joined

2.3.3 Domain model

UML, possible some text.

2.3.4 User interface 

User interface will be an android app, the app will use standard android widgets.

2.4 References

  APPENDIX 

  GUI

  Domain model

  Use case texts

